/* Author: Noah Cordova */

/* 
selector {
    property: value;
}
*/
h1 {
    padding-bottom: 10px;
    border-bottom: 2px solid black;
    margin: 20px 0px 0px 0px;
}

h3{
    color: grey;
}

/* Element Selectors */
a {
    font-size: large;
}

/* ID Selectors */
    /*
    #id { property:value; }
    */
#h2_html {
    color: rgb(135, 177, 250);
}
#h2_css {
    color: rgb(0, 0, 255);
}

/* Class Selectors */
    /* 
        .class { property: value; }
    */
.w3schools {
    color: green;
}
.mozilla {
    color: darkmagenta;
}

/* Descendant Selectors */
    /* Applies to every element that is nested within(descended from) any other selector */
    /* 
        parent_selector descendant_selector { property: value; }
    */

/* Direct Child(Descendant) Selectors */
    /* Selects elements that are direct children(first-level descendants) of another element */
    /* 
        parent_element > child_element { property: value; }
    */

/* Adjacent Selectors */
    /* Selects elements that are immediately preceded by another element */
    /* 
        preceding_element + succeeding_element { property: value; }
    */

/* Attribute Selectors */
    /* Selects elements with a specific type attribute */
    /* 
        element[type="some_type"] { property: value; }
    */



/* Pseudo-classes */
    /* Keyword added to a selector that specifies a special state(pseudo-class) of the selected element(s) */
    /* Selects element when they are in a state of pseudo-class */
    /*
        element:pseudo-class { property: value; }
    */
section a:hover {
    font-weight:bolder;
    background-color: lightgray;
}

/* Psuedo-elements */
    /* Keyword added to a selector that lets you style a particular part of selected element(s) */
    /* Selects part of element(pseudo-element) for every specified element */
    /* 
        element::pseudo-element { property: value; }
    */
h3::first-letter {
    font-size: 18pt;
}



/* Cascade */
    /* Precedence with the order that styles (and style sheets) are declared */
    /* Succeeding styles/stylesheets take precedence over preceding styles/stylesheets when they conflict */



/* Specificity */
    /* How the browser decides which rules to apply when multiple rules could apply to the same element */
    /* The more specific selector 'wins' */
    /* Specificity order precedence:
            ID > Class > Element
            *Note: if there is a conflict w/ same types of selectors, greater number of selectors wins (by type precedence)
            *Ex. 1 ID > 28 Class
            *Ex. 1 ID, 2 Class > 1 ID, 1 Class, 20 Element
    */
    /* Inline html stlyes take precedence over ID **DO NOT USE** */
    /* keyword "!important" after any style rule is highest precedence **DO NOT USE** */



/* Inheritance */
    /* Descendants inherit properties of their ancestors (following specificity rules) */
    /* SOME properties are NOT inherited */

/* Content Boxes (width, height, border, padding, margin) */
main section {
    margin-bottom: 100px;
}
.language_section_body {
    width: 300px;
    height: 100%;
    border-left-width: 3px;
    border-left-style: solid;
    padding-left: 10px;
}
#div_html {
    border-left-color: rgb(135, 177, 250);;
}
#div_css {
    border-left-color: rgb(0, 0, 255);
}

/* Display Property */
    /* Inline: Width and height are ignored. Margin and padding push elements away horizontally, not vertically */
    /* Block: Elements break flow of document. Width, height, margin, and padding are respected */
    /* Inline-block: Behaves like inline except width, height, margin, and padding are respected */
/* .main_navigation_bar {
    border-color: black;
    border-width: 1px;
    border-style: solid;
} */

/* CSS Units */
/* Relative Units */
    /* Percentages */
        /* Value from the parent or from the element itself */
    /* Em's */
        /* With font size, 1em equals the font-size of the parent 2em equals twice the font-size of the parent */
        /* With other properties, 1em equals the computed font-size of the element itself */
    /* Rem's */
        /* Like em's, but relative to the root html element's font-size */

/* Transparency and Opacity */
    /* Transparency - Alpha Channel*/
        /* rgba(red, green, blue, alpha) */
        /* alpha controls transparency from 0.0 (transparent) to 1.0 (not transparent) */
    /* Opacity Property */
        /* The degree to which content behind an element is hidden, opposite of transparency */
        /* opacity: 0.0 (opaque) to 1.0 (not opaque)*/

/* Position Property */
    /* Sets how an element is positioned in a document. ie. top, right, bottom, and left */
    /* #element { position: static (also relative, absolute, fixed); } */

/* Transition Properties */
    /* Transition: property name | duration | timing function | delay */

/* Transform Property */
    /* transform-origin: bottom-right */
    /* transform: rotate(0deg) scale(0.0) translate(Xpx,Ypx) */


/* Background Property */
    /* 
        background-image: url("https://someurl.com") or url("some/filepath");
        background-size: cover;
        background-position: top;
    */
    /* OR... */
    /* 
        background: center/cover url("https://someurl.com");
    */

/* Google Fonts - fonts.google.com */
    /* Advantages: All users get to see font for free upon webpage loading */
    /* Embed url for selected font family(ies) in html head */
body {
    font-family: 'Source Sans Pro', sans-serif;
    font-weight: 300;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    margin: 8px;
}
h1,h2,h3 {
    font-family: 'Montserrat', sans-serif;
    font-weight: 300;
}

/* Flexbox  - CSS Web Layout Model */
    /* Turn on flexbox with...
       element { display: flex; }   
    */

    /* Layout */
    /* Follows two axes controlled by...
        flex-direction: row;            //(left-to-right)
        flex-direction: row-reverse;    //(right-to-left)
        flex-direction: column;         //(top-to-bottom)
        flex-direction: column-reverse; //(bottom-to-top)
        
    */

    /* Justify Content - how content is distributed across main axis */
    /*  
        justify-content: flex-start;    //(default) content justified with beginning of main axis
        justify-content: flex-end;      //content justified with end of main axis
        justify-content: flex-center;   //content centered on main axis
        justify-content: space-between; //space distributed evenly between elements, but not around
        justify-content: space-around;  //space distributed evenly around elements, ie. space on ends 0.5x space between
        justify-content: space-evenly;  //space distributed evenly between and around elements, ie. space equal on ends and between
    */
    
    /* Flex Wrap - determines if elements wrap along main axis along new row (if horizontal) or new column (if vertical) */
    /*  
        flex-wrap: wrap;            //wraps elements in new rows/columns along normal cross-axis
        flex-wrap: wrap-reverse;    //wraps elements in new rows/columns along reversed cross-axis
        flex-wrap: nowrap;          //(default) elements do not wrap    
    */

    /* Align items - how content is distributed along cross-axis */
    /* 
        align-items: flex-start;    //(default) items aligned with beginning of cross axis
        align-items: flex-end;      //items aligned with end of cross axis
        align-items: flex-center;   //items centered on cross axis
        align-items: baseline;      //items aligned along the baseline of text, not containers
    */

    /* Align content - distributes space along cross axis between rows/columns */
        /* *Does nothing if content does not wrap */
    /* 
        align-content: flex-start;
        align-content: flex-end;
        align-content: flex-center;
        align-content: space-between;
        align-content: space-around;
        align-content: space-evenly;
    */

    /* Align Self - property added to individual items in a flex container */
    /* Controls alignment of one item along cross axis within its container */

    /* Flex Sizing Properties */
    /* Flex-basis: defines initial size of an element before additional space is distributed, along main axis */
        /* 
            element { flex-basis: 100px; } \
        */
    /* Flex-grow: controls amount of available space an element should take up (accepts unit-less number) */
        /* 
            element { flex-grow: 1 }    //element grows to take up all available extra space (if only element that grows)
            element { flex-grow: 2 }    //element grows to take up available extra space, 2x as much as the other grow element of value 1
        */
    /* Flex-shrink: controls how/if items shrink if larger than container */
        /*
            element { flex-shrink: 2}   //element shrinks at 2x rate compared to other elements as container shrinks
            element { flex-shrink: 0}   //element does not shrink at all
        */
    
    /* Flex - shorthand property for all flex properties */
        /* 
            flex: grow shrink basis
            flex: 2 1 100px;
        */



.main_body {
    display: flex;
}

.main_navigation_bar {
    background-color: white;
    border: none;
    border-bottom: 2px solid orange;
    width: 100%;
    height: 50px;
    padding: 0px 10px;
    display: flex;
    justify-content: flex-start;
    align-items: center;
}

.main_navigation_bar .navigation_bar_logo_container {
    padding: 8px;
    margin: 1px 10px 1px 1px;
}

.main_navigation_bar .navigation_bar_element {
    background: none;
    border: none;
    color: orange;
    padding: 8px;
    font-size: 1em;
    margin: 1px 10px;
}

button.navigation_bar_element:hover {
    color: orangered;
    border-bottom: 2px solid;
    cursor: pointer;
}

/* Media Queries */
    /* 
        @media (some_media_feature: value) {
            element { property: some_property; }
        }
    */
    /* 
        @media (min-width: 500px) and (max-width: 1000px) {
            h1 { color: red; }
        }

        @media (orientation: landscape) {
            body { background-color: blue; }
        }
    */
@media (max-width: 750px) {
    .main_body {
        flex-direction: column;
    }
}